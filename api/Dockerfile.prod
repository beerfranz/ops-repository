#syntax=docker/dockerfile:1.4

# The different stages of this Dockerfile are meant to be built into separate images
# https://docs.docker.com/develop/develop-images/multistage-build/#stop-at-a-specific-build-stage
# https://docs.docker.com/compose/compose-file/#target

# https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact
ARG PHP_VERSION=8.1
ARG CADDY_VERSION=2

# Prod image
FROM php:${PHP_VERSION}-fpm-bullseye AS app_php

# Allow to use development versions of Symfony
ARG STABILITY="stable"
ENV STABILITY ${STABILITY}

# Allow to select Symfony version
ARG SYMFONY_VERSION=""
ENV SYMFONY_VERSION ${SYMFONY_VERSION}

ENV APP_ENV=prod

WORKDIR /srv/app

# php extensions installer: https://github.com/mlocati/docker-php-extension-installer
# ADD https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions /usr/local/bin/
# RUN chmod +x /usr/local/bin/install-php-extensions

# persistent / runtime deps
# RUN apk add --no-cache \
#     acl \
#     fcgi \
#     file \
#     gettext \
#     git \
#   ;

# RUN apk add --no-cache \
#     postgresql-dev \
#     libzip-dev



RUN apt update && \
  apt install -y \
    libpq-dev \
#    zlib1g-dev \
#    libssl-dev \
    libzip-dev \
#    unzip \
    libicu-dev \
#    wget \
  && apt clean && \
  rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN du -sch /* || echo "ok"

RUN docker-php-ext-configure pdo_pgsql

RUN docker-php-ext-install \
      zip \
      pdo_pgsql \
      intl

RUN du -sch /* || echo "ok"

# RUN pecl install apcu;
# RUN pecl clear-cache;
# RUN docker-php-ext-enable \
#     apcu \
#     opcache \
#   ;

# RUN set -eux; \
#     install-php-extensions \
#       intl \
#       zip \
#       apcu \
#     opcache \
#     ;

###> recipes ###
###< recipes ###

RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"
# COPY docker/php/conf.d/app.ini $PHP_INI_DIR/conf.d/
# COPY docker/php/conf.d/app.prod.ini $PHP_INI_DIR/conf.d/

COPY ./config/fpm/zz-docker.conf /usr/local/etc/php-fpm.d/zz-docker.conf
RUN mkdir -p /var/run/php

COPY ./docker-healthcheck.sh /usr/local/bin/docker-healthcheck
RUN chmod +x /usr/local/bin/docker-healthcheck

HEALTHCHECK --interval=10s --timeout=3s --retries=3 CMD ["docker-healthcheck"]

COPY ./docker-entrypoint.sh /usr/local/bin/docker-entrypoint
RUN chmod +x /usr/local/bin/docker-entrypoint

ENTRYPOINT ["docker-entrypoint"]
CMD ["php-fpm"]

# https://getcomposer.org/doc/03-cli.md#composer-allow-superuser
ENV COMPOSER_ALLOW_SUPERUSER=1
ENV PATH="${PATH}:/root/.composer/vendor/bin"

COPY --from=composer/composer:2-bin /composer /usr/bin/composer

# prevent the reinstallation of vendors at every changes in the source code
COPY ./composer.* ./symfony.* ./
RUN set -eux; \
    if [ -f composer.json ]; then \
    composer install --prefer-dist --no-dev --no-autoloader --no-scripts --no-progress; \
    composer clear-cache; \
    fi

# copy sources
COPY . .

RUN set -eux; \
  mkdir -p var/cache var/log; \
    if [ -f composer.json ]; then \
    composer dump-autoload --classmap-authoritative --no-dev; \
    composer dump-env prod; \
    composer run-script --no-dev post-install-cmd; \
    chmod +x bin/console; sync; \
    fi
